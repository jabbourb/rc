(in-package :stumpwm)
(set-contrib-dir "~/.stumpwm.d/")

;;; Modifier: Windows key
(defparameter *mod-key* "s")

;;; Group commands into logical groups, each with its own prefix
(defmacro define-key-group (name prefix &body mappings)
  `(progn
     (defvar ,name (make-sparse-keymap))
     (define-key *top-map* (kbd ,(format nil "~a-~a" *mod-key* prefix)) ',name)
     ,@(mapcar (lambda(map)
                 `(define-key ,name (kbd ,(car map)) ,@(cdr map)))
               mappings)))

;; Commands for managing groups
(define-key-group *group-map* "g"
  ("g" "groups")
  ("j" "gnext")
  ("k" "gprev")
  ("d" "gkill")
  ("n" "gnew")
  ("r" "grename"))

;; Meta-commands and administration
(define-key-group *control-map* "x"
  ("q" "quit")
  ("r" "loadrc")
  (":" "colon")
  (";" "eval")
  ("d" "delete")
  ("h" "exec sudo pm-suspend")
  ("H" "exec sudo pm-hibernate"))

;; Commands for managing windows
(define-key-group *window-map* "w"
  ("w" "windows")
  ("s" "hsplit")
  ("S" "vsplit")
  ("r" "iresize")
  ("o" "only")
  ("d" "remove")
  ("=" "balance-frames")
  ("j" "move-focus down")
  ("k" "move-focus up")
  ("h" "move-focus left")
  ("l" "move-focus right")
  ("J" "move-window down")
  ("K" "move-window up")
  ("H" "move-window left")
  ("L" "move-window right")
  ("SPC" "pull-hidden-next")
  ("S-SPC" "pull-hidden-previous"))


;;; We use the *top-map* for a one-level indirection (no prefix)
(defmacro define-keys-top (use-mod &body mappings)
  `(progn
     ,@(mapcar (lambda(map)
                 `(define-key *top-map*
                      (kbd ,(format nil "~:[~*~;~a-~]~a" use-mod *mod-key* (car map))) ,@(cdr map)))
               mappings)))

(define-keys-top t
  ;; Shortcuts
  ("j" "move-focus down")
  ("k" "move-focus up")
  ("h" "move-focus left")
  ("l" "move-focus right")
  ("J" "move-window down")
  ("K" "move-window up")
  ("H" "move-window left")
  ("L" "move-window right")
  ("SPC" "pull-hidden-next")
  ("S-SPC" "pull-hidden-previous")
  ("s" "hsplit")
  ("S" "vsplit")

  ;; Mode line
  ("f" "mode-line")

  ;; Applications
  ("I" "exec uzbl-browser")
  ("i" "exec firefox")
  ("e" "exec emacsclient -c")
  ("RET" "exec sakura")
  ("m" "exec sakura -e 'mutt -y'"))

;; Don't use a modifier for audio keys
(define-keys-top nil
  ("XF86AudioLowerVolume" "exec amixer -q sset Master 5%- unmute")
  ("XF86AudioRaiseVolume" "exec amixer -q sset Master 5%+ unmute")
  ("XF86AudioMute" "exec amixer -q sset Master toggle"))


;;; Mode-line
(setf *time-modeline-string* "%R")

(load-module "maildir")
(maildir-set-update-time 60)
(setf *maildir-path* "~/mail/")
(setf *maildir-modeline-fmt* "%n")

(load-module "wifi")
(setf stumpwm.contrib.wifi:*wireless-device* "wlan0")
(setf stumpwm.contrib.wifi:*iwconfig-path* "/usr/sbin/iwconfig")

(load-module "battery-portable")

(setf *mode-line-timeout* 1
      *window-format* "%n%s%30t%m"
      *screen-mode-line-format* "^B%M^b %d [^B%n^b] %W [%I | %B]")

;; Activate the mode line for the current screen
(if (not (head-mode-line (current-head)))
     (toggle-mode-line (current-screen) (current-head)))


;;; Default groups
(defun define-groups (keys)
  (dotimes (n (length keys))
     (let ((n+ (1+ n)))         ;Start at group 1
       (define-key *top-map*
           (kbd (format nil "~a-~a" *mod-key* n+)) (format nil "gselect ~a" n+))
       (define-key *top-map*
           (kbd (format nil "~a-~a" *mod-key* (char keys n))) (format nil "gmove ~a" n+)))))

(defun create-groups (&rest names)
  (dolist (name names)
    (run-commands (format nil "gnewbg ~a" name))))

(define-groups "!@#$%^")
(create-groups "Net" "Emacs" "Mp3")


;;; Message window font
(set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")
;;; This is the prefix key for the (unused) *root-map*
(set-prefix-key (kbd "s-t"))
